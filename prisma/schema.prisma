generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  role               UserRole
  profileData        Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  activityLogs       ActivityLog[]
  availabilityRules  AvailabilityRule[]
  bookingSlots       BookingSlot[]
  bookingsAsCreator  Booking[]           @relation("BookingCreator")
  bookingsAsHost     Booking[]           @relation("BookingHost")
  calendarConnection CalendarConnection?

  @@map("users")
}

model Client {
  id               String             @id @default(uuid())
  name             String
  businessName     String
  address          String?
  dudaSiteId       String?            @unique
  metadata         Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  firstOrderDate   DateTime?
  lastOrderDate    DateTime?
  lifetimeValue    Decimal            @default(0) @db.Decimal(10, 2)
  totalOrders      Int                @default(0)
  activityLogs     ActivityLog[]
  bookings         Booking[]
  carts            Cart?
  formResponses    FormResponse[]
  generatedContent GeneratedContent[]
  orders           Order[]
  requests         Request[]
  services         Service[]

  @@index([lifetimeValue])
  @@map("clients")
}

model ServiceTemplate {
  id               String      @id @default(uuid())
  name             String
  type             ServiceType
  defaultTasks     Json[]      @default([])
  price            Float?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  requiredFormIds  String[]    @default([])
  contractTemplate String?
  currency         String      @default("USD")
  isPurchasable    Boolean     @default(false)
  maxQuantity      Int         @default(1)
  requiresContract Boolean     @default(false)
  sortOrder        Int         @default(0)
  storeDescription String?
  storeImages      Json?
  storeTitle       String?
  stripePriceId    String?     @unique
  cartItems        CartItem[]
  orderItems       OrderItem[]
  services         Service[]

  @@index([isPurchasable, sortOrder])
  @@map("service_templates")
}

model Service {
  id         String          @id @default(uuid())
  templateId String
  clientId   String
  status     ServiceStatus   @default(TO_DO)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  bookings   Booking[]
  orderItem  OrderItem?
  client     Client          @relation(fields: [clientId], references: [id])
  template   ServiceTemplate @relation(fields: [templateId], references: [id])
  tasks      Task[]

  @@index([clientId])
  @@index([templateId])
  @@index([status])
  @@map("services")
}

model Task {
  id            String     @id @default(uuid())
  serviceId     String
  name          String
  description   String?
  dueDate       DateTime?
  clientVisible Boolean    @default(false)
  status        TaskStatus @default(TO_DO)
  metadata      Json?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  checklist     Json?
  service       Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([status])
  @@map("tasks")
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String
  entityType String
  entityId   String
  clientId   String?
  action     String
  metadata   Json?
  createdAt  DateTime @default(now())
  client     Client?  @relation(fields: [clientId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType, entityId])
  @@index([clientId])
  @@index([createdAt])
  @@map("activity_logs")
}

model Attachment {
  id         String   @id @default(uuid())
  entityType String
  entityId   String
  fileName   String
  filePath   String
  fileSize   Int
  mimeType   String
  metadata   Json?
  uploadedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([uploadedBy])
  @@index([createdAt])
  @@map("attachments")
}

model Form {
  id          String         @id @default(uuid())
  name        String
  description String?
  schema      Json
  settings    Json?
  serviceId   String?
  createdBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  responses   FormResponse[]

  @@index([serviceId])
  @@index([createdBy])
  @@map("forms")
}

model FormResponse {
  id           String   @id @default(uuid())
  formId       String
  clientId     String
  responseData Json
  submittedAt  DateTime @default(now())
  client       Client   @relation(fields: [clientId], references: [id])
  form         Form     @relation(fields: [formId], references: [id])

  @@index([formId])
  @@index([clientId])
  @@index([submittedAt])
  @@map("form_responses")
}

model Request {
  id            String           @id @default(uuid())
  clientId      String
  description   String
  status        RequestStatus    @default(TO_DO)
  dudaData      Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  completedAt   DateTime?
  clientVisible Boolean          @default(false)
  comments      RequestComment[]
  client        Client           @relation(fields: [clientId], references: [id])

  @@index([clientId])
  @@index([status])
  @@index([createdAt])
  @@map("requests")
}

model RequestComment {
  id        String   @id @default(uuid())
  requestId String
  text      String
  dudaUuid  String?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([dudaUuid])
  @@map("request_comments")
}

model Webhook {
  id            String             @id @default(uuid())
  name          String
  url           String
  type          WebhookType
  entityId      String?
  headers       Json?
  isActive      Boolean            @default(true)
  createdBy     String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  isProduction  Boolean            @default(true)
  productionUrl String?
  testingUrl    String?
  contentTools  ContentTool[]
  executions    WebhookExecution[]

  @@index([type])
  @@index([entityId])
  @@index([isActive])
  @@map("webhooks")
}

model WebhookExecution {
  id         String   @id @default(uuid())
  webhookId  String
  payload    Json
  response   Json?
  statusCode Int?
  error      String?
  executedAt DateTime @default(now())
  webhook    Webhook  @relation(fields: [webhookId], references: [id])

  @@index([webhookId])
  @@index([executedAt])
  @@map("webhook_executions")
}

model ContentTool {
  id               String             @id @default(uuid())
  type             ContentToolType    @unique
  name             String
  description      String?
  prompt           String
  webhookId        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  fields           Json?
  webhook          Webhook?           @relation(fields: [webhookId], references: [id])
  generatedContent GeneratedContent[]

  @@map("content_tools")
}

model GeneratedContent {
  id        String      @id @default(uuid())
  toolId    String
  clientId  String
  prompt    String
  content   String
  metadata  Json?
  createdBy String
  createdAt DateTime    @default(now())
  client    Client      @relation(fields: [clientId], references: [id])
  tool      ContentTool @relation(fields: [toolId], references: [id])

  @@index([toolId])
  @@index([clientId])
  @@index([createdBy])
  @@index([createdAt])
  @@map("generated_content")
}

model ApiKey {
  id           String   @id @default(uuid())
  service      String   @unique
  encryptedKey String
  lastFour     String
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("api_keys")
}

model CalendarConnection {
  id           String   @id @default(uuid())
  userId       String   @unique
  provider     String
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  calendarId   String
  email        String
  syncEnabled  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("calendar_connections")
}

model Booking {
  id            String        @id @default(uuid())
  title         String
  description   String?
  clientId      String
  serviceId     String?
  hostId        String
  startTime     DateTime
  endTime       DateTime
  duration      Int
  status        BookingStatus @default(PENDING)
  location      String?
  meetingUrl    String?
  googleEventId String?
  attendees     Json
  reminderSent  Boolean       @default(false)
  cancelReason  String?
  notes         String?
  createdBy     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  client        Client        @relation(fields: [clientId], references: [id])
  creator       User          @relation("BookingCreator", fields: [createdBy], references: [id])
  host          User          @relation("BookingHost", fields: [hostId], references: [id])
  service       Service?      @relation(fields: [serviceId], references: [id])

  @@index([hostId, startTime])
  @@index([clientId])
  @@index([status])
  @@index([startTime])
  @@map("bookings")
}

model AvailabilityRule {
  id        String   @id @default(uuid())
  userId    String
  name      String
  isDefault Boolean  @default(false)
  timezone  String   @default("America/New_York")
  rules     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("availability_rules")
}

model BookingSlot {
  id        String  @id @default(uuid())
  userId    String
  dayOfWeek Int
  startTime String
  endTime   String
  isActive  Boolean @default(true)
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, dayOfWeek, startTime])
  @@map("booking_slots")
}

model Cart {
  id        String     @id @default(uuid())
  clientId  String     @unique
  expiresAt DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  client    Client     @relation(fields: [clientId], references: [id])

  @@map("carts")
}

model CartItem {
  id                String          @id @default(uuid())
  cartId            String
  serviceTemplateId String
  quantity          Int             @default(1)
  addedAt           DateTime        @default(now())
  cart              Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  serviceTemplate   ServiceTemplate @relation(fields: [serviceTemplateId], references: [id])

  @@unique([cartId, serviceTemplateId])
  @@map("cart_items")
}

model Order {
  id                    String           @id @default(uuid())
  orderNumber           String           @unique @default(cuid())
  clientId              String
  status                OrderStatus      @default(PENDING)
  subtotal              Decimal          @db.Decimal(10, 2)
  tax                   Decimal          @default(0) @db.Decimal(10, 2)
  total                 Decimal          @db.Decimal(10, 2)
  currency              String           @default("USD")
  stripePaymentIntentId String?          @unique
  stripeSessionId       String?          @unique
  paymentMethod         String?
  paymentStatus         PaymentStatus    @default(PENDING)
  metadata              Json?
  notes                 String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  paidAt                DateTime?
  completedAt           DateTime?
  invoice               Invoice?
  items                 OrderItem[]
  timeline              OrderTimeline[]
  client                Client           @relation(fields: [clientId], references: [id])
  contract              ServiceContract?

  @@index([clientId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id                String          @id @default(uuid())
  orderId           String
  serviceTemplateId String
  serviceName       String
  quantity          Int             @default(1)
  unitPrice         Decimal         @db.Decimal(10, 2)
  total             Decimal         @db.Decimal(10, 2)
  metadata          Json?
  serviceId         String?         @unique
  order             Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service           Service?        @relation(fields: [serviceId], references: [id])
  serviceTemplate   ServiceTemplate @relation(fields: [serviceTemplateId], references: [id])

  @@map("order_items")
}

model ServiceContract {
  id              String    @id @default(uuid())
  orderId         String    @unique
  templateContent String
  signedAt        DateTime?
  signatureData   Json?
  signedByName    String?
  signedByEmail   String?
  ipAddress       String?
  userAgent       String?
  order           Order     @relation(fields: [orderId], references: [id])

  @@map("service_contracts")
}

model Invoice {
  id      String    @id @default(uuid())
  number  String    @unique
  orderId String    @unique
  pdfUrl  String?
  sentAt  DateTime?
  dueDate DateTime?
  order   Order     @relation(fields: [orderId], references: [id])

  @@index([number])
  @@map("invoices")
}

model OrderTimeline {
  id          String    @id @default(uuid())
  orderId     String
  status      String
  title       String
  description String?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  order       Order     @relation(fields: [orderId], references: [id])

  @@map("order_timeline")
}

model SalesMetrics {
  id              String   @id @default(uuid())
  date            DateTime @unique @db.Date
  revenue         Decimal  @db.Decimal(10, 2)
  orderCount      Int
  newCustomers    Int
  avgOrderValue   Decimal  @db.Decimal(10, 2)
  refundAmount    Decimal  @default(0) @db.Decimal(10, 2)
  contractsSigned Int      @default(0)

  @@index([date])
  @@map("sales_metrics")
}

enum UserRole {
  ADMIN
  SERVICE_MANAGER
  COPYWRITER
  EDITOR
  VA
  CLIENT
}

enum ServiceType {
  GOOGLE_ADS
  FACEBOOK_ADS
  WEBSITE_DESIGN
}

enum ServiceStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

enum RequestStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

enum WebhookType {
  FORM
  CONTENT_TOOL
  GENERAL
}

enum ContentToolType {
  BLOG_WRITER
  FACEBOOK_VIDEO_AD
  FACEBOOK_IMAGE_AD
  GOOGLE_SEARCH_AD
  SEO_KEYWORD_RESEARCH
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
}

enum OrderStatus {
  PENDING
  AWAITING_CONTRACT
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}
