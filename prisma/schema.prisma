generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  SERVICE_MANAGER
  COPYWRITER
  EDITOR
  VA
  CLIENT
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  role        UserRole
  profileData Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  activityLogs ActivityLog[]

  @@map("users")
}

model Client {
  id           String   @id @default(uuid())
  name         String
  businessName String
  address      String?
  dudaSiteId   String?  @unique
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  activityLogs ActivityLog[]
  services     Service[]

  @@map("clients")
}

enum ServiceType {
  GOOGLE_ADS
  FACEBOOK_ADS
  WEBSITE_DESIGN
}

enum ServiceStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

model ServiceTemplate {
  id           String      @id @default(uuid())
  name         String
  type         ServiceType
  defaultTasks Json[]      @default([])
  price        Float?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  services Service[]

  @@map("service_templates")
}

model Service {
  id         String        @id @default(uuid())
  templateId String
  clientId   String
  status     ServiceStatus @default(TO_DO)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  template ServiceTemplate @relation(fields: [templateId], references: [id])
  client   Client          @relation(fields: [clientId], references: [id])
  tasks    Task[]

  @@index([clientId])
  @@index([templateId])
  @@index([status])
  @@map("services")
}

model Task {
  id            String     @id @default(uuid())
  serviceId     String
  name          String
  description   String?
  dueDate       DateTime?
  clientVisible Boolean    @default(false)
  status        TaskStatus @default(TO_DO)
  metadata      Json?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([status])
  @@map("tasks")
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String
  entityType String
  entityId   String
  clientId   String?
  action     String
  metadata   Json?
  createdAt  DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id])
  client Client? @relation(fields: [clientId], references: [id])

  @@index([userId])
  @@index([entityType, entityId])
  @@index([clientId])
  @@index([createdAt])
  @@map("activity_logs")
}

model Attachment {
  id         String   @id @default(uuid())
  entityType String   // 'service', 'task', 'client', etc.
  entityId   String
  fileName   String
  filePath   String   // Supabase storage path
  fileSize   Int      // Size in bytes
  mimeType   String
  metadata   Json?    // Additional metadata like dimensions for images
  uploadedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([uploadedBy])
  @@index([createdAt])
  @@map("attachments")
}